plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.25.0'
	id 'jacoco'
}

group = 'com.az.jwt.example'
version = '0.0.1'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

docker {
	name "${project.name}"
	dockerfile file('Dockerfile')
	copySpec.from(jar).rename('.*', 'app.jar')
	buildArgs(['JAR_FILE': 'app.jar'])
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
	compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	// https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
	compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'

}

test {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.5"
	reportsDir = file("$buildDir/jacoco")
}

test {
	finalizedBy jacocoTestReport
}
jacocoTestReport {
	dependsOn test
}

jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude:  [
					'com/az/jwt/example/model/**',
					'com/az/jwt/example/filter/**',
					'com/az/jwt/example/exception/**',
					'com/az/jwt/example/AzJwtExampleApplication.class',
					'com/az/jwt/example/SpringSecurityConfig.class',
					'com/az/jwt/example/util/CustomCommandLineRunner.class'

			])
		}))
	}
}